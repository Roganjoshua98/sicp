#lang sicp

; Exercise 1.9
; Each of the following two procedures defines a method for adding two positive
; integers in terms of the procedures inc, which increments its argument by 1,
; and dec, which decrements its argument by 1.

(define (add1 a b)
  (if (= a 0) 
      b 
      (inc (add1 (dec a) b))))

(define (add2 a b)
  (if (= a 0) 
      b 
      (add2 (dec a) (inc b))))

; Using the substitution model, illustrate the process generated by
; each procedure in evaluating (+ 4 5).
; Are these processes iterative or recursive?

; (add1 4 5)
; (inc (add1 (dec 4) 5))
; (inc (add1 3 5))
; (inc (inc (add1 (dec 3) 5)))
; ... and so on

; (add2 4 5)
; (add2 (dec 4) (inc 5))
; (add2 3 6)
; (add2 (dec 3) (inc 6))
; (add2 2 7)
; ... and so on

; add1 is recursive, since it builds up a chain of deferred operators (i.e it
; has to eventually inc a times on b)
; add2 meanwhile stores state variable a and b, with its structure just calling
; itself again with a new state. This does not build up any chain, and can be
; called starting from any step in the process
